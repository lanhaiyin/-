#include<string.h>
#include <iostream>
#include <cmath>
using namespace std;
int _count=0;
int judge_safeW(int check[8][8],int row,int m,int n)
{
    //判断当前位置的的前面数组里有没有和当前位置在同一条直线上
    //分成四部分，左上角，左下角，右上角和右下角

    //列
    for(int i=0;i<m;i++)
    {
        if(check[i][n]==3)
          return 1;
    }
    //左上角
    for(int i=m-1,j=n-1;i>=0&&j>=0;i--,j--)
    {
        if(check[i][j]==3)
            return 1;
    }
    //右上角
    for(int i=m-1,j=n+1;i>=0&&j<row;i--,j++)
    {
        if(check[i][j]==3)
            return 1;
    }
    return 0;
}
int judge_safeB(int check[8][8],int row,int m,int n)
{
    //判断当前位置的的前面数组里有没有和当前位置在同一条直线上
    //分成四部分，左上角，左下角，右上角和右下角

    //列
    for(int i=0;i<m;i++)
    {
        if(check[i][n]==2)
          return 1;
    }
    //左上角
    for(int i=m-1,j=n-1;i>=0&&j>=0;i--,j--)
    {
        if(check[i][j]==2)
            return 1;
    }
    //右上角
    for(int i=m-1,j=n+1;i>=0&&j<row;i--,j++)
    {
        if(check[i][j]==2)
            return 1;
    }
    return 0;
}

 void eight_queens(int check[8][8],int n,int m)//m表示当前行
 {

     if(m==n)
     {
         //cout<<"-----------第--"<<_count<<"-----种-----------------"<<endl;
         //已经全部找到了一组满足情况的棋盘

         _count++;
     }

     //先从第一行开始放皇后，从0~7列一个一个试，如果所下的地方与之前下的地方不冲突，
     //则当前位置是安全的，并将这个位置置1


         for(int j=0;j<n;j++)
         {
             for(int k=0;k<n;k++)
             if(j!=k&&judge_safeW(check,n,m,k)==0&&judge_safeB(check,n,m,j)==0&&check[m][j]!=0&&check[m][k]!=0)//调用judge_safe函数来判断所下的位置是否安全
             {                             //如果j这一列都会与上面的冲突，则回溯到上一行，并从上一行的j+1的地方又开始判断

                 //为避免不能一次性下对地方，所以现将这一行的元素都置0，
                 //再将check[row][j]置1，否则一行可能会出现多个1

                  check[m][j]=2;//黑
                  check[m][k]=3;//白
                 //第row行已经下好继续第row+1
                 eight_queens(check,n,m+1);

                 check[m][j]=1;
                 check[m][k]=1;
             }
         }
 }


int main()
{
    //定义并初始化一个8*8的棋盘
    //棋盘刚开始的元素都为0，将皇后的位置置为1.
    int n=0;
    cin>>n;
     int check[8][8]={0};
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
            cin>>check[i][j];
    }

    eight_queens(check,n,0);


    cout<<_count<<endl;

    return 0;

}
