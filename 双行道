
//题目描述：
//有一个2* n的网格，有一个人位于(1, 1)的位置，即左上角，他希望从左上角走到右下角，即(2, n)的位置。在每一次，他可以进行三种操作中的一种：
//1． 向右走一格，即从(x, y)到(x, y + 1);
//2． 向上右方走一格，即，如果他在(2, y)的位置可以走到(1, y + 1);
//3． 向下右方走一格，即，如果他在(1, y)的位置可以走到(2, y + 1);
//
//问题当然不会这么简单，在这2* n的格子中，有一部分格子上有障碍物，他不能停在障碍物上，当然也不能走出网格，请问他有多少种不同的路线可以到达(2, n)。
//输入
//输入第一行仅包含一个正整数n，表示网格的长度。(1 <= n <= 50)
//接下来有2行, 每行有n个字符，“X”代表障碍物，“.”代表可以停留。
//输出
//如果没有可以到达的路线则输出 - 1，否则输出方案数量。
//
//样例输入
//5
//. . X . X
//X X . . .
//样例输出
//2



#include <iostream>
#include <cstring>
#include <string.h>
#include <stdlib.h>
#include <iomanip>
#include <algorithm>
#include <math.h>
using namespace std;
int mycount=0; int row=0;
int is_ok(char arr[2][10],int m,int row)
{
   // if(m==5)
   //     return 0;
    if(arr[row][m]=='.')
        return 1;
    else return 0;
}
//m表示进行到第几列
void fun(char arr[2][10],int n,int m)
{
    if(m==n-1&&row==1)
    {
       mycount++;
    }

    //一共三种情况，右上右和右下
    for(int i=-1;i<=1;i++)
    {
          if(is_ok(arr,m+1,row+i)==1)
        {
            arr[row+i][m+1]='1';
            row=row+i;
            fun(arr,n,m+1);
            arr[row+i][m+1]='.';
            row=row-i;
        }
    }
}
int main()
{

    int n;
    cin>>n;
    char arr[2][10];
    // .表示可以存放 X表示不能存放

   cin>>arr[0];
   cin>>arr[1];
    arr[0][0]='1';
    fun(arr,n,0);
    cout<<mycount;
    return 0;
}
