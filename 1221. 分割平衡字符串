
在一个「平衡字符串」中，'L' 和 'R' 字符的数量是相同的。

给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。

返回可以通过分割得到的平衡字符串的最大数量。

示例 1：

输入：s = "RLRRLLRLRL"
输出：4
解释：s 可以分割为 "RL", "RRLL", "RL", "RL", 每个子字符串中都包含相同数量的 'L' 和 'R'。
示例 2：

输入：s = "RLLLLRRRLR"
输出：3
解释：s 可以分割为 "RL", "LLLRRR", "LR", 每个子字符串中都包含相同数量的 'L' 和 'R'。
示例 3：

输入：s = "LLLLRRRR"
输出：1
解释：s 只能保持原样 "LLLLRRRR".
 

提示：

1 <= s.length <= 1000
s[i] = 'L' 或 'R'
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/split-a-string-in-balanced-strings 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
int lengthOfLastWord(char* s) {
    char* p1 = s; 
    char* p2 = s;
    int sum = 0;
    while (*p2 != '\0')
    {
        p2++;
    }//结束后p2 指向'\0'
    if(p2 == s) return 0;//解决""
    p2--;
    while (*p2 == ' ')
    {
        if(p2 == s) return 0;//解决" "和"   "
        --p2;
    }
    p1 = p2+1;//配合只有一个单词的情况，因为只有一个单词时结束条件会提前
    while (p1 != s && *(p1-1) != ' ')//必须p1 != s 在前，因为如果只有一个单词时，*(p1-1)的访问会越界
    {
        sum++;
        --p1;
    }
    return sum;
}
