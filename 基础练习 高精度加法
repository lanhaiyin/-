
问题描述
　　输入两个整数a和b，输出这两个整数的和。a和b都不超过100位。
算法描述
　　由于a和b都比较大，所以不能直接使用语言中的标准数据类型来存储。对于这种问题，一般使用数组来处理。
　　定义一个数组A，A[0]用于存储a的个位，A[1]用于存储a的十位，依此类推。同样可以用一个数组B来存储b。
　　计算c = a + b的时候，首先将A[0]与B[0]相加，如果有进位产生，则把进位（即和的十位数）存入r，把和的个位数存入C[0]，即C[0]等于(A[0]+B[0])%10。然后计算A[1]与B[1]相加，这时还应将低位进上来的值r也加起来，即C[1]应该是A[1]、B[1]和r三个数的和．如果又有进位产生，则仍可将新的进位存入到r中，和的个位存到C[1]中。依此类推，即可求出C的所有位。
　　最后将C输出即可。
输入格式
　　输入包括两行，第一行为一个非负整数a，第二行为一个非负整数b。两个整数都不超过100位，两数的最高位都不是0。
输出格式
　　输出一行，表示a + b的值。
样例输入
20100122201001221234567890
2010012220100122
样例输出
20100122203011233454668012





#include<string.h>
#include <iostream>
#include <cmath>
using namespace std;



//将两个数组中每一位的值相加
void _plus(char*arr1,char*arr2,char arr3[110])
{
    int len1=strlen(arr1);int len2=strlen(arr2);
    int i=len1-1,j=len2-1,k=0;int jin=0;

    while((len1)&&(len2))
    {
        if((arr1[i]+arr2[j]+jin-'0')<':')
        {
              arr3[k]=arr1[i]+arr2[j]+jin-'0';
              jin=0;
        }

        else
        {
              arr3[k]=(arr1[i]+arr2[j]+jin-'0')-10;
              jin=1;
        }
          --i;--j;++k;
          len1--;len2--;
    }
    if(jin>0)
    {
        arr3[k]=jin+48;
        ++k;
    }
    //将剩余的赋给arr3数组
    while(len1--)
    {
        arr3[k]=arr1[i];
        ++k;--i;
    }
    while(len2--)
    {
        arr3[k]=arr2[j];
        ++k;--j;
    }

}
 void _swap(char arr3[101],int left,int right)
 {
    while(left<right)
    {
        int temp=arr3[left];
        arr3[left]=arr3[right];
        arr3[right]=temp;
        ++left;--right;
    }

 }
int main()
{


  char arr1[110];
  char arr2[110];
  cin>>arr1>>arr2;
   char arr3[110]={0};
    _plus(arr1,arr2,arr3);
int len=strlen(arr3);

    //交换数组里面的内容
    _swap(arr3,0,len-1);
     //打印数组
   for(int i=0;i<len;i++)
   {
       cout<<arr3[i];
   }
   return 0;
}
