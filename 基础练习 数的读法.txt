问题描述
　　Tom教授正在给研究生讲授一门关于基因的课程，有一件事情让他颇为头疼：一条染色体上有成千上万个碱基对，它们从0开始编号，到几百万，几千万，甚至上亿。
　　比如说，在对学生讲解第1234567009号位置上的碱基时，光看着数字是很难准确的念出来的。
　　所以，他迫切地需要一个系统，然后当他输入12 3456 7009时，会给出相应的念法：
　　十二亿三千四百五十六万七千零九
　　用汉语拼音表示为
　　shi er yi san qian si bai wu shi liu wan qi qian ling jiu
　　这样他只需要照着念就可以了。
　　你的任务是帮他设计这样一个系统：给定一个阿拉伯数字串，你帮他按照中文读写的规范转为汉语拼音字串，相邻的两个音节用一个空格符格开。
　　注意必须严格按照规范，比如说“10010”读作“yi wan ling yi shi”而不是“yi wan ling shi”，“100000”读作“shi wan”而不是“yi shi wan”，“2000”读作“er qian”而不是“liang qian”。
输入格式
　　有一个数字串，数值大小不超过2,000,000,000。
输出格式
　　是一个由小写英文字母，逗号和空格组成的字符串，表示该数的英文读法。
样例输入
1234567009
样例输出
shi er yi san qian si bai wu shi liu wan qi qian ling jiu

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

//求出数的长度
int S_len(int  num)
{
	int sum = 0;
	while (num)
	{
		num /= 10;
		sum++;
	}
	return sum;
}
//将120190  变成"yi","er"," ","ling","yi","jiu","ling"  返回的是加上空格的大小比如12 3456 返回7
int fang(int num,char arr[][5],char ping[][5])
{
     int len=S_len(num);int kongge=(len-1)/4;//空格的个数
    int t=0;
    int i=len+kongge-1;
    while (num)
	{
	    if(t==4)
	    {
	        t=0;
            arr[i][0]=' ';
	    }
          else{
             arr[i][0]=(num%10+'0');
		     num /= 10;
		     ++t;
          }

		--i;
	}
	//arr[len+kongge]='\0';
	//加上空格，没有转换成拼音之前的大小
	//作用将 '1'转换为"yi"  等等
	int my_len=len+kongge;
	int _len=my_len;
	i=0;int j;
	while(_len--)
    {
        j=0;
        while(j<10)
        {
            if(arr[i][0]==(j+'0'))
            {
                strcpy((const)arr[i],(const)ping[j]);
                break;
            }
            else if(arr[i][0]==' ')
            {
                 strcpy(arr[i]," ");
                 break;
            }

            j++;
        }

        i++;
    }
   strcpy(arr[i]," ");//给arr数组的最后一行放入"\0"数组的结束
    return my_len;
}
void  duqu(char arr[][5],char s[][6],int num,char ping[][5])
{
    int len=fang(num,arr,ping);
    int wei=0;int yuan=0;int k=0;
    int i=0;int j=0;
    //计算有多少个空格
   int kongge=(S_len( num)-1)/4;//表示数组里空格的总数
    //将arr数组里的数表示出来存进s数组
    while(i<len)
    {

           //计算当前字符离空格有多远
           k=i;
           yuan=0;
        while(strcmp(arr[k]," ")!=0)
        {
            k++;
            yuan++;

        }
        if(strcmp(arr[i]," ")!=0)//不是空格则表示出来并存进s根据离空格的距离算出当前的位
        {
            //两个0相邻或者最后一个为0，不读continue
            if(((strcmp(arr[i],"ling")==0)&&(strcmp(arr[i+1],"ling")==0))||(strcmp(arr[i],"ling")==0)&&(i==len-1))
            {
                ++i;
                continue;
            }
            //120 0000当空格的前一个为0时不读
            if((strcmp(arr[i],"ling")==0)&&(strcmp(arr[i+1]," ")==0))
                {
                   ++i;
                   continue;
                }
                 else if((strcmp(arr[i],"yi")==0)&&(strcmp(arr[i+2]," ")==0))//当遇到12这种“yi”要读成“shi”
                 {
                     strcpy(s[j],"shi ");j++;
                     i++;
                     continue;
                 }
            else
            {
                 strcpy(s[j],arr[i]);j++;strcpy(s[j]," ");j++;
            }

            if(yuan>1&&(strcmp(arr[i],"ling")!=0))//各位不需要填位 根据距离空格的距离计算相应位并填写
            {
               if(yuan==4)strcpy(s[j],"qian ");
             if(yuan==3)strcpy(s[j],"bai ");
             if(yuan==2)strcpy(s[j],"shi ");
                   j++;
            }


        }
        if(strcmp(arr[i]," ")==0)//根据空格的总数以及出现的次数将相应的位填充空格
        {

            if(kongge==2)
            {
               strcpy(s[j],"yi ");kongge--;

            }
            else if(kongge==1){
               strcpy(s[j],"wan ");
                 kongge--;
            }
           j++;
        }
          i++;
    }
    int s_len=j;
    //打印字符数组
    for(j=0;j<s_len;j++)
    {
        printf("%s",s[j]);
    }
}



int main()
{
    int num;
    scanf("%d",&num);

    char arr[20][5];//用来存放字符，最终转换为字符串
    char ping[12][5]={"ling","yi","er","san","si","wu","liu","qi","ba","jiu" };
   char s[100][6];//用来存放最终的答案
    fang( num,arr,ping);
    duqu(arr,s,num,ping);
    return 0;
}


