
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#define ROW 3
#define COL 3
void InitBoard(char board[][ROW], int row, int col);//初始化棋盘
void ShowBoard(char board[][ROW], int row, int col);//打印棋盘
void playermove(char board[][ROW], int row, int col);//玩家移动
char iswin(char board[][ROW], int row, int col);//判断谁赢
char computermove(char board[][ROW], int row, int col);//电脑移动
int full(char board[][ROW], int row, int col);
void abc(char board[][ROW], int row, int col);
void menu()
{
	printf("*****输入1玩游戏****输入0退出*****\n");
}
void InitBoard(char board[][ROW], int row, int col)//将棋盘置空
{
	int i = 0, j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
			board[i][j] = ' ';
	}
	
}
void ShowBoard(char board[][ROW], int row, int col)//打印棋盘界面
{
	int i = 0, j = 0;
	printf(" --- --- --- \n");
	for (i = 0; i < row; i++)
	{
		printf("!");
		for (j = 0; j < col; j++)
		{
			printf(" %c !", board[i][j]);
		}
		printf("\n");
		for (j = 0; j < col; j++)
		{
			printf(" ---");
		}
		printf("\n");
	}
}
void playermove(char board[][ROW], int row, int col)
{
	int x = 0, y = 0;
	while (1)
	{
		printf("请输入你要下的位置1~3\n");
		scanf("%d%d", &x, &y);
		
				row = x - 1; col= y - 1;
				if (row < 3 && row >= 0&&col>=0&&col<3)
				{
					if (board[row][col] == ' ')
					{
						board[row][col] = 'X';
						break;
					}
				}
				else 
					printf("位置不合法请重输\n");
	}	
	
}
char computermove(char board[][ROW], int row, int col)
{

	int i = 0;
	

	for (i = 0; i < row; i++)
	{

		if ((board[i][0] == board[i][1] && board[i][1] == 'X') && board[i][2] == ' ')
		{
			board[i][2] = 'O';

		}

		else if ((board[i][0] == board[i][2] && board[i][2] == 'X') && board[i][1] == ' ')
		{
			board[i][1] = 'O';
		}

		else if ((board[i][2] == board[i][1] && board[i][1] == 'X') && board[i][0] == ' ')
		{
			board[i][0] = 'O';
		}
		//
		else if ((board[0][i] == board[1][i] && board[1][i] == 'X') && board[2][i] == ' ')
		{
			board[2][i] == 'O';
		}
		else if ((board[0][i] == board[2][i] && board[2][i] == 'X') && board[1][i] == ' ')
		{
			board[1][i] == 'O';
		}
		else if ((board[2][i] == board[1][i] && board[1][i] == 'X') && board[0][i] == ' ')
		{
			board[0][i] == 'O';
		}

	}

			if ((board[0][0] == board[1][1] && board[1][1] == 'X') && board[2][2] == ' ')

			{
				board[2][2] == 'O'; 
			}


			else if ((board[0][0] == board[2][2] && board[2][2] == 'X') && board[1][1] == ' ')

			{
				board[1][1] == 'O'; 
			}

			else if ((board[1][1] == board[2][2] && board[2][2] == 'X') && board[0][0] == ' ')

			{
				board[0][0] == 'O'; 
			}
			//右对角线
			else if ((board[0][2] == board[1][1] && board[1][1] == 'X') && board[2][0] == ' ')

			{
				board[2][0] == 'O'; 
			}
			else if ((board[0][2] == board[2][0] && board[2][0] == 'X') && board[1][1] == ' ')

			{
				board[1][1] == 'O'; 
			}
			else if ((board[2][0] == board[1][1] && board[1][1] == 'X') && board[0][2] == ' ')

			{
				board[0][2] == 'O'; 
			}
			else return 'W';
		
		
	
	
}

void abc(char board[][ROW], int row, int col)
{
	while (1)
	{
		srand((unsigned)time(NULL));
		row = rand() % 3;
		col = rand() % 3;
		if (board[row][col] == ' ')
		{
			board[row][col] = 'O'; break;
		}
	}
}

char iswin(char board[][ROW], int row, int col)
{
		int i = 0; int j = 0;
		for (i = 0; i < row; i++)
		{
			//判断行是否有赢家
			if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][2] != ' ')
			{
				return board[i][0];
			}
			//判断列是否有赢家
			if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[2][i] != ' ')
			{
				return board[0][i];
			}
		}
		    //判断左对角线是否有赢家
			if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[2][2] != ' ')
			{
				return board[0][0];
		  //判断左对角线是否有赢家
			}
			if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[2][0] != ' ')
			{
				return board[0][2];
			}
		//如果棋盘已满返回0
			if (full(board, 3, 3) == 0)
			{
				return 0;

			}
			else return 1;
			
		
		
		
		
		
}//判断棋盘是否已满，满返回0否则返回1
	int full(char board[][ROW], int row, int col)
	{
		int i = 0, j = 0;
		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
			{

				if (board[i][j]==' ')
					return 1;
			}
		}
		return 0;
	}

	void game()
	{
		char ret = 0; char hhh = 0;
		char board[3][3] = { 0 };
		InitBoard(board, 3, 3);
		ShowBoard(board, 3, 3);
		while (1)
		{
			playermove(board, 3, 3);
			ShowBoard(board, 3, 3);
			ret = iswin(board, 3, 3);
			if (ret== 'X'||ret=='O'||ret==0)
			{
				break;
			}
			
			hhh = computermove(board, 3, 3);
			{
				if (hhh == 'W')
				abc(board, 3, 3);
			}
			ShowBoard(board, 3, 3);
			ret = iswin(board, 3, 3);
			if (ret == 'X' || ret == 'O' || ret == 0)
			{
				break;
			}
			
		}
		
		if (ret == 'X')
		{
			printf("你赢了\n");

		}
		else if (ret == 'O')
		{
			printf("你输了\n");

		}
		else if (ret == 0)
		{
			printf("棋盘已满\n");

		}

	
	
}

	int main()
	{
	int input = 0;
	do{
		menu();
		scanf("%d",&input);
		switch (input){
		case 1:
			game();
			break;
		case 0:
			printf("即将退出游戏\n");
				break;
		default:
			break;
		}
	} while (input);
	

	return 0;
}